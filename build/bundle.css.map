{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  import * as d3 from 'd3';\n  import dayjs from 'dayjs';\n  import data from './data/2019-nCoV.json';\n  import utils from './utils/utils.js';\n  import {\n    width,\n    height,\n    margin,\n    adjust,\n    countryColorMap,\n  } from './utils/config.js';\n  import normalize from './normalize.js';\n\n  // share variables\n  let messageVariable = {\n    country: '',\n    province: '',\n    total_confirm: '',\n    total_death: '',\n    total_cure: '',\n    confirm: '',\n    death: '',\n    confirm_rate: '',\n  };\n  let dateString = '';\n\n  // functions define\n  const getDayString = (n) => {\n    return dayjs('20200131', 'YYYYMMDD')\n      .add(n, 'day')\n      .format('YYYYMMDD');\n  }\n\n  const getDataCount = (data) => {\n    return Object.keys(data).length - 1;\n  };\n\n  // event function\n  const handleChange = () => {\n    const currentValue = document.getElementById('bar').value;\n    // data preprocess\n    dateString = getDayString(currentValue);\n    const xAxisData = normalize.genRateRange(data, dateString, 'Comfirmed Rate', 100);\n    const yAxisData = normalize.genRateRange(data, dateString, 'Deaths Variation');\n    // d3 update\n    const yScale = utils.yAxisScale(yAxisData.min, yAxisData.max);\n    const xScale = utils.xAxisScale(xAxisData.min, xAxisData.max);\n    const radius = utils.radiusScale([0, 10000]);\n    const colorScale = d3.scaleSequential()\n      .domain([0, 30])\n      .interpolator(d3.interpolateRainbow);\n    // draw\n    d3.select('#xaxis')\n      .transition().duration(500)\n      .call(utils.xAxisDraw(xScale, xAxisData));\n    d3.select('#yaxis')\n      .transition().duration(500)\n      .call(utils.yAxisDraw(yScale, yAxisData));\n    d3.select('#xgrid').call(utils.xGridDraw(xScale, xAxisData, 500));\n    d3.select('#ygrid').call(utils.yGridDraw(yScale, yAxisData, 500));\n    d3.select('#g-circle').selectAll('circle')\n      .data(data[dateString])\n      .join('circle')\n        .transition().duration(500)\n        .attr('cx', d => xScale(Number.parseFloat(d['Comfirmed Rate'])*100))\n        .attr('cy', d => yScale(Number.parseFloat(d['Deaths Variation'])))\n        .attr('r', d => radius(Number.parseInt(d['Total Comfirmed'])))\n        .attr('transform', `translate(${adjust}, ${-adjust})`)\n  }\n\n  onMount(() => {\n    // data preprocess\n    dateString = getDayString(0);\n    const xAxisData = normalize.genRateRange(data, dateString, 'Comfirmed Rate', 100);\n    const yAxisData = normalize.genRateRange(data, dateString, 'Deaths Variation');\n\n    // d3 data preprocess\n    const yScale = utils.yAxisScale(yAxisData.min, yAxisData.max);\n    const xScale = utils.xAxisScale(xAxisData.min, xAxisData.max);\n    const radius = utils.radiusScale([0, 10000]);\n    const colorScale = d3.scaleSequential()\n      .domain([0, 30])\n      .interpolator(d3.interpolateRainbow);\n\n    // draw\n    const rootElement = d3.select('main');\n    const svg = rootElement.append('svg')\n      .attr('id', 'svgElement')\n      .attr('viewBox', [0, 0, width, height])\n      .style('border', '1px solid black');\n    // xaxis\n    svg.append('g')\n      .attr('id', 'xaxis')\n      .attr('transform', `translate(${adjust}, ${height - margin.bottom})`)\n      .call(utils.xAxisDraw(xScale, xAxisData));\n    // yaxis\n    svg.append('g')\n      .attr('id', 'yaxis')\n      .attr('transform', `translate(${margin.left}, ${-adjust})`)\n      .call(utils.yAxisDraw(yScale, yAxisData));\n    // grid-x, -y\n    svg.append('g')\n      .attr('id', 'xgrid')\n      .attr('stroke', 'currentColor')\n      .attr('stroke-opacity', 0.2)\n      .call(utils.xGridDraw(xScale, xAxisData))\n    svg.append('g')\n      .attr('id', 'yaxis')\n      .attr('stroke', 'currentColor')\n      .attr('stroke-opacity', 0.2)\n      .call(utils.yGridDraw(yScale, yAxisData))\n\n    // circle\n    const circle = svg.append('g')\n      .attr('id', 'g-circle')\n      .selectAll('circle')\n      .data(data[dateString])\n      .join('circle')\n        .attr('cx', d => xScale(Number.parseFloat(d['Comfirmed Rate'])*100))\n        .attr('cy', d => yScale(Number.parseFloat(d['Deaths Variation'])))\n        .attr('r', d => radius(Number.parseInt(d['Total Comfirmed'])))\n        .attr('transform', `translate(${adjust}, ${-adjust})`)\n        .style('fill', d => colorScale(countryColorMap[d['Country/Region']]))\n        .style('stroke', 'black')\n        .style('stroke-width', '1px')\n        .on('mouseover', d => {\n          messageVariable = {\n            country: d['Country/Region'],\n            province: d['Province/State'],\n            total_confirm: d['Total Comfirmed'],\n            total_death: d['Total Deaths'],\n            total_cure: d['Total Recovered'],\n            confirm: d['Comfirmed Variation'],\n            death: d['Deaths Variation'],\n            confirm_rate: (Number.parseFloat(d['Comfirmed Rate'])*100).toFixed(2) + '%',\n          }\n          document.getElementById('message').style.display = 'block';\n          \n        })\n        .on('mouseout', () => document.getElementById('message').style.display = 'none');\n  });\n</script>\n\n<main></main>\n<div id=\"message\">\n  國家：{messageVariable.country}\n  {#if messageVariable.province !== undefined}\n    <br>\n    省份：{messageVariable.province}\n  {/if}\n  <br>\n  總確診數（人）：{messageVariable.total_confirm}\n  <br>\n  總死亡數（人）：{messageVariable.total_death}\n  <br>\n  總治癒數（人）：{messageVariable.total_cure}\n  <br>\n  當日新增確診數（人）：{messageVariable.confirm}\n  <br>\n  當日新增死亡數（人）：{messageVariable.death}(Y軸)\n  <br>\n  確診增加率（％）：{messageVariable.confirm_rate}(X軸)\n  <br>\n  （<strong>總確診數</strong>除以<strong>當日新增確診數</strong>）\n</div>\n<input\n  type=\"range\"\n  name=\"i\"\n  id=\"bar\"\n  min=\"0\"\n  max={getDataCount(data)}\n  value=\"0\"\n  style=\"width: 180px;\"\n  on:change={handleChange}\n/>\n<span>{dateString}</span>\n\n<style>\n  main {\n    position: relative;\n    z-index: 1000;\n  }\n  #message {\n    display: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    margin: 20px;\n    padding: 5px;\n    width: 350px;\n    height: 400px;\n    color: #856404;\n    background-color: #fff3cd;\n    border: 1px #856404 solid;\n    border-radius: 4px;\n    z-index: 1001;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AAoLE,IAAI,cAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,AACf,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,CAAC,CACR,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,OAAO,CACd,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,GAAG,CAAC,OAAO,CAAC,KAAK,CACzB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,IAAI,AACf,CAAC"
}